// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: pkg/proto/compliance.proto

package compliance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComplianceService_HealthCheck_FullMethodName              = "/compliance.ComplianceService/HealthCheck"
	ComplianceService_ReadinessCheck_FullMethodName           = "/compliance.ComplianceService/ReadinessCheck"
	ComplianceService_PerformComplianceCheck_FullMethodName   = "/compliance.ComplianceService/PerformComplianceCheck"
	ComplianceService_GetUserComplianceStatus_FullMethodName  = "/compliance.ComplianceService/GetUserComplianceStatus"
	ComplianceService_BatchComplianceCheck_FullMethodName     = "/compliance.ComplianceService/BatchComplianceCheck"
	ComplianceService_GetMonitoringOverview_FullMethodName    = "/compliance.ComplianceService/GetMonitoringOverview"
	ComplianceService_GetActiveAlerts_FullMethodName          = "/compliance.ComplianceService/GetActiveAlerts"
	ComplianceService_AcknowledgeAlert_FullMethodName         = "/compliance.ComplianceService/AcknowledgeAlert"
	ComplianceService_GetSystemHealth_FullMethodName          = "/compliance.ComplianceService/GetSystemHealth"
	ComplianceService_DetectManipulation_FullMethodName       = "/compliance.ComplianceService/DetectManipulation"
	ComplianceService_GetManipulationAlerts_FullMethodName    = "/compliance.ComplianceService/GetManipulationAlerts"
	ComplianceService_ResolveManipulationAlert_FullMethodName = "/compliance.ComplianceService/ResolveManipulationAlert"
	ComplianceService_CreateInvestigation_FullMethodName      = "/compliance.ComplianceService/CreateInvestigation"
	ComplianceService_GetInvestigation_FullMethodName         = "/compliance.ComplianceService/GetInvestigation"
	ComplianceService_UpdateInvestigation_FullMethodName      = "/compliance.ComplianceService/UpdateInvestigation"
	ComplianceService_ListInvestigations_FullMethodName       = "/compliance.ComplianceService/ListInvestigations"
	ComplianceService_GetAuditLogs_FullMethodName             = "/compliance.ComplianceService/GetAuditLogs"
	ComplianceService_CreateAuditEntry_FullMethodName         = "/compliance.ComplianceService/CreateAuditEntry"
	ComplianceService_GetMonitoringPolicies_FullMethodName    = "/compliance.ComplianceService/GetMonitoringPolicies"
	ComplianceService_UpdateMonitoringPolicy_FullMethodName   = "/compliance.ComplianceService/UpdateMonitoringPolicy"
)

// ComplianceServiceClient is the client API for ComplianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ComplianceService provides gRPC endpoints for compliance operations
type ComplianceServiceClient interface {
	// Health checks
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	ReadinessCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Compliance checks
	PerformComplianceCheck(ctx context.Context, in *ComplianceCheckRequest, opts ...grpc.CallOption) (*ComplianceCheckResponse, error)
	GetUserComplianceStatus(ctx context.Context, in *UserComplianceRequest, opts ...grpc.CallOption) (*UserComplianceResponse, error)
	BatchComplianceCheck(ctx context.Context, in *BatchComplianceRequest, opts ...grpc.CallOption) (*BatchComplianceResponse, error)
	// Monitoring operations
	GetMonitoringOverview(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MonitoringOverviewResponse, error)
	GetActiveAlerts(ctx context.Context, in *AlertsRequest, opts ...grpc.CallOption) (*AlertsResponse, error)
	AcknowledgeAlert(ctx context.Context, in *AcknowledgeAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSystemHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemHealthResponse, error)
	// Manipulation detection
	DetectManipulation(ctx context.Context, in *ManipulationDetectionRequest, opts ...grpc.CallOption) (*ManipulationDetectionResponse, error)
	GetManipulationAlerts(ctx context.Context, in *ManipulationAlertsRequest, opts ...grpc.CallOption) (*ManipulationAlertsResponse, error)
	ResolveManipulationAlert(ctx context.Context, in *ResolveAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Investigation management
	CreateInvestigation(ctx context.Context, in *CreateInvestigationRequest, opts ...grpc.CallOption) (*Investigation, error)
	GetInvestigation(ctx context.Context, in *GetInvestigationRequest, opts ...grpc.CallOption) (*Investigation, error)
	UpdateInvestigation(ctx context.Context, in *UpdateInvestigationRequest, opts ...grpc.CallOption) (*Investigation, error)
	ListInvestigations(ctx context.Context, in *ListInvestigationsRequest, opts ...grpc.CallOption) (*ListInvestigationsResponse, error)
	// Audit logs
	GetAuditLogs(ctx context.Context, in *AuditLogsRequest, opts ...grpc.CallOption) (*AuditLogsResponse, error)
	CreateAuditEntry(ctx context.Context, in *CreateAuditEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Policy management
	GetMonitoringPolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MonitoringPoliciesResponse, error)
	UpdateMonitoringPolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type complianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceServiceClient(cc grpc.ClientConnInterface) ComplianceServiceClient {
	return &complianceServiceClient{cc}
}

func (c *complianceServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ComplianceService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) ReadinessCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ComplianceService_ReadinessCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) PerformComplianceCheck(ctx context.Context, in *ComplianceCheckRequest, opts ...grpc.CallOption) (*ComplianceCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComplianceCheckResponse)
	err := c.cc.Invoke(ctx, ComplianceService_PerformComplianceCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetUserComplianceStatus(ctx context.Context, in *UserComplianceRequest, opts ...grpc.CallOption) (*UserComplianceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserComplianceResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetUserComplianceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) BatchComplianceCheck(ctx context.Context, in *BatchComplianceRequest, opts ...grpc.CallOption) (*BatchComplianceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchComplianceResponse)
	err := c.cc.Invoke(ctx, ComplianceService_BatchComplianceCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetMonitoringOverview(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MonitoringOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitoringOverviewResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetMonitoringOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetActiveAlerts(ctx context.Context, in *AlertsRequest, opts ...grpc.CallOption) (*AlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetActiveAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) AcknowledgeAlert(ctx context.Context, in *AcknowledgeAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ComplianceService_AcknowledgeAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetSystemHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemHealthResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetSystemHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) DetectManipulation(ctx context.Context, in *ManipulationDetectionRequest, opts ...grpc.CallOption) (*ManipulationDetectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManipulationDetectionResponse)
	err := c.cc.Invoke(ctx, ComplianceService_DetectManipulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetManipulationAlerts(ctx context.Context, in *ManipulationAlertsRequest, opts ...grpc.CallOption) (*ManipulationAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManipulationAlertsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetManipulationAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) ResolveManipulationAlert(ctx context.Context, in *ResolveAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ComplianceService_ResolveManipulationAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) CreateInvestigation(ctx context.Context, in *CreateInvestigationRequest, opts ...grpc.CallOption) (*Investigation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Investigation)
	err := c.cc.Invoke(ctx, ComplianceService_CreateInvestigation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetInvestigation(ctx context.Context, in *GetInvestigationRequest, opts ...grpc.CallOption) (*Investigation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Investigation)
	err := c.cc.Invoke(ctx, ComplianceService_GetInvestigation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateInvestigation(ctx context.Context, in *UpdateInvestigationRequest, opts ...grpc.CallOption) (*Investigation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Investigation)
	err := c.cc.Invoke(ctx, ComplianceService_UpdateInvestigation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) ListInvestigations(ctx context.Context, in *ListInvestigationsRequest, opts ...grpc.CallOption) (*ListInvestigationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvestigationsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_ListInvestigations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetAuditLogs(ctx context.Context, in *AuditLogsRequest, opts ...grpc.CallOption) (*AuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditLogsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) CreateAuditEntry(ctx context.Context, in *CreateAuditEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ComplianceService_CreateAuditEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetMonitoringPolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MonitoringPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitoringPoliciesResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetMonitoringPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateMonitoringPolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ComplianceService_UpdateMonitoringPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceServiceServer is the server API for ComplianceService service.
// All implementations must embed UnimplementedComplianceServiceServer
// for forward compatibility.
//
// ComplianceService provides gRPC endpoints for compliance operations
type ComplianceServiceServer interface {
	// Health checks
	HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error)
	ReadinessCheck(context.Context, *emptypb.Empty) (*ReadinessResponse, error)
	// Compliance checks
	PerformComplianceCheck(context.Context, *ComplianceCheckRequest) (*ComplianceCheckResponse, error)
	GetUserComplianceStatus(context.Context, *UserComplianceRequest) (*UserComplianceResponse, error)
	BatchComplianceCheck(context.Context, *BatchComplianceRequest) (*BatchComplianceResponse, error)
	// Monitoring operations
	GetMonitoringOverview(context.Context, *emptypb.Empty) (*MonitoringOverviewResponse, error)
	GetActiveAlerts(context.Context, *AlertsRequest) (*AlertsResponse, error)
	AcknowledgeAlert(context.Context, *AcknowledgeAlertRequest) (*emptypb.Empty, error)
	GetSystemHealth(context.Context, *emptypb.Empty) (*SystemHealthResponse, error)
	// Manipulation detection
	DetectManipulation(context.Context, *ManipulationDetectionRequest) (*ManipulationDetectionResponse, error)
	GetManipulationAlerts(context.Context, *ManipulationAlertsRequest) (*ManipulationAlertsResponse, error)
	ResolveManipulationAlert(context.Context, *ResolveAlertRequest) (*emptypb.Empty, error)
	// Investigation management
	CreateInvestigation(context.Context, *CreateInvestigationRequest) (*Investigation, error)
	GetInvestigation(context.Context, *GetInvestigationRequest) (*Investigation, error)
	UpdateInvestigation(context.Context, *UpdateInvestigationRequest) (*Investigation, error)
	ListInvestigations(context.Context, *ListInvestigationsRequest) (*ListInvestigationsResponse, error)
	// Audit logs
	GetAuditLogs(context.Context, *AuditLogsRequest) (*AuditLogsResponse, error)
	CreateAuditEntry(context.Context, *CreateAuditEntryRequest) (*emptypb.Empty, error)
	// Policy management
	GetMonitoringPolicies(context.Context, *emptypb.Empty) (*MonitoringPoliciesResponse, error)
	UpdateMonitoringPolicy(context.Context, *UpdatePolicyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComplianceServiceServer()
}

// UnimplementedComplianceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplianceServiceServer struct{}

func (UnimplementedComplianceServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedComplianceServiceServer) ReadinessCheck(context.Context, *emptypb.Empty) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadinessCheck not implemented")
}
func (UnimplementedComplianceServiceServer) PerformComplianceCheck(context.Context, *ComplianceCheckRequest) (*ComplianceCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformComplianceCheck not implemented")
}
func (UnimplementedComplianceServiceServer) GetUserComplianceStatus(context.Context, *UserComplianceRequest) (*UserComplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserComplianceStatus not implemented")
}
func (UnimplementedComplianceServiceServer) BatchComplianceCheck(context.Context, *BatchComplianceRequest) (*BatchComplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchComplianceCheck not implemented")
}
func (UnimplementedComplianceServiceServer) GetMonitoringOverview(context.Context, *emptypb.Empty) (*MonitoringOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringOverview not implemented")
}
func (UnimplementedComplianceServiceServer) GetActiveAlerts(context.Context, *AlertsRequest) (*AlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveAlerts not implemented")
}
func (UnimplementedComplianceServiceServer) AcknowledgeAlert(context.Context, *AcknowledgeAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeAlert not implemented")
}
func (UnimplementedComplianceServiceServer) GetSystemHealth(context.Context, *emptypb.Empty) (*SystemHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemHealth not implemented")
}
func (UnimplementedComplianceServiceServer) DetectManipulation(context.Context, *ManipulationDetectionRequest) (*ManipulationDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectManipulation not implemented")
}
func (UnimplementedComplianceServiceServer) GetManipulationAlerts(context.Context, *ManipulationAlertsRequest) (*ManipulationAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManipulationAlerts not implemented")
}
func (UnimplementedComplianceServiceServer) ResolveManipulationAlert(context.Context, *ResolveAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveManipulationAlert not implemented")
}
func (UnimplementedComplianceServiceServer) CreateInvestigation(context.Context, *CreateInvestigationRequest) (*Investigation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvestigation not implemented")
}
func (UnimplementedComplianceServiceServer) GetInvestigation(context.Context, *GetInvestigationRequest) (*Investigation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestigation not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateInvestigation(context.Context, *UpdateInvestigationRequest) (*Investigation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvestigation not implemented")
}
func (UnimplementedComplianceServiceServer) ListInvestigations(context.Context, *ListInvestigationsRequest) (*ListInvestigationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvestigations not implemented")
}
func (UnimplementedComplianceServiceServer) GetAuditLogs(context.Context, *AuditLogsRequest) (*AuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (UnimplementedComplianceServiceServer) CreateAuditEntry(context.Context, *CreateAuditEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditEntry not implemented")
}
func (UnimplementedComplianceServiceServer) GetMonitoringPolicies(context.Context, *emptypb.Empty) (*MonitoringPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringPolicies not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateMonitoringPolicy(context.Context, *UpdatePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitoringPolicy not implemented")
}
func (UnimplementedComplianceServiceServer) mustEmbedUnimplementedComplianceServiceServer() {}
func (UnimplementedComplianceServiceServer) testEmbeddedByValue()                           {}

// UnsafeComplianceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceServiceServer will
// result in compilation errors.
type UnsafeComplianceServiceServer interface {
	mustEmbedUnimplementedComplianceServiceServer()
}

func RegisterComplianceServiceServer(s grpc.ServiceRegistrar, srv ComplianceServiceServer) {
	// If the following call pancis, it indicates UnimplementedComplianceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComplianceService_ServiceDesc, srv)
}

func _ComplianceService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_ReadinessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).ReadinessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_ReadinessCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).ReadinessCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_PerformComplianceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).PerformComplianceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_PerformComplianceCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).PerformComplianceCheck(ctx, req.(*ComplianceCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetUserComplianceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetUserComplianceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetUserComplianceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetUserComplianceStatus(ctx, req.(*UserComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_BatchComplianceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).BatchComplianceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_BatchComplianceCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).BatchComplianceCheck(ctx, req.(*BatchComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetMonitoringOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetMonitoringOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetMonitoringOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetMonitoringOverview(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetActiveAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetActiveAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetActiveAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetActiveAlerts(ctx, req.(*AlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_AcknowledgeAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).AcknowledgeAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_AcknowledgeAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).AcknowledgeAlert(ctx, req.(*AcknowledgeAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetSystemHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetSystemHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetSystemHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetSystemHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_DetectManipulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulationDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).DetectManipulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_DetectManipulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).DetectManipulation(ctx, req.(*ManipulationDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetManipulationAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulationAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetManipulationAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetManipulationAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetManipulationAlerts(ctx, req.(*ManipulationAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_ResolveManipulationAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).ResolveManipulationAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_ResolveManipulationAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).ResolveManipulationAlert(ctx, req.(*ResolveAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_CreateInvestigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvestigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).CreateInvestigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_CreateInvestigation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).CreateInvestigation(ctx, req.(*CreateInvestigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetInvestigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetInvestigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetInvestigation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetInvestigation(ctx, req.(*GetInvestigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateInvestigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvestigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateInvestigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_UpdateInvestigation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateInvestigation(ctx, req.(*UpdateInvestigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_ListInvestigations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvestigationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).ListInvestigations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_ListInvestigations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).ListInvestigations(ctx, req.(*ListInvestigationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetAuditLogs(ctx, req.(*AuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_CreateAuditEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).CreateAuditEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_CreateAuditEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).CreateAuditEntry(ctx, req.(*CreateAuditEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetMonitoringPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetMonitoringPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetMonitoringPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetMonitoringPolicies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_UpdateMonitoringPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateMonitoringPolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceService_ServiceDesc is the grpc.ServiceDesc for ComplianceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compliance.ComplianceService",
	HandlerType: (*ComplianceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ComplianceService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadinessCheck",
			Handler:    _ComplianceService_ReadinessCheck_Handler,
		},
		{
			MethodName: "PerformComplianceCheck",
			Handler:    _ComplianceService_PerformComplianceCheck_Handler,
		},
		{
			MethodName: "GetUserComplianceStatus",
			Handler:    _ComplianceService_GetUserComplianceStatus_Handler,
		},
		{
			MethodName: "BatchComplianceCheck",
			Handler:    _ComplianceService_BatchComplianceCheck_Handler,
		},
		{
			MethodName: "GetMonitoringOverview",
			Handler:    _ComplianceService_GetMonitoringOverview_Handler,
		},
		{
			MethodName: "GetActiveAlerts",
			Handler:    _ComplianceService_GetActiveAlerts_Handler,
		},
		{
			MethodName: "AcknowledgeAlert",
			Handler:    _ComplianceService_AcknowledgeAlert_Handler,
		},
		{
			MethodName: "GetSystemHealth",
			Handler:    _ComplianceService_GetSystemHealth_Handler,
		},
		{
			MethodName: "DetectManipulation",
			Handler:    _ComplianceService_DetectManipulation_Handler,
		},
		{
			MethodName: "GetManipulationAlerts",
			Handler:    _ComplianceService_GetManipulationAlerts_Handler,
		},
		{
			MethodName: "ResolveManipulationAlert",
			Handler:    _ComplianceService_ResolveManipulationAlert_Handler,
		},
		{
			MethodName: "CreateInvestigation",
			Handler:    _ComplianceService_CreateInvestigation_Handler,
		},
		{
			MethodName: "GetInvestigation",
			Handler:    _ComplianceService_GetInvestigation_Handler,
		},
		{
			MethodName: "UpdateInvestigation",
			Handler:    _ComplianceService_UpdateInvestigation_Handler,
		},
		{
			MethodName: "ListInvestigations",
			Handler:    _ComplianceService_ListInvestigations_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _ComplianceService_GetAuditLogs_Handler,
		},
		{
			MethodName: "CreateAuditEntry",
			Handler:    _ComplianceService_CreateAuditEntry_Handler,
		},
		{
			MethodName: "GetMonitoringPolicies",
			Handler:    _ComplianceService_GetMonitoringPolicies_Handler,
		},
		{
			MethodName: "UpdateMonitoringPolicy",
			Handler:    _ComplianceService_UpdateMonitoringPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/compliance.proto",
}
