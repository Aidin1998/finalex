// This file has been migrated to use the standardized model package
// Avoid duplication of code and use the engine implementation in internal/trading/engine instead

package trading

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/shopspring/decimal"
	"go.uber.org/zap"
	"gorm.io/gorm"
	
	"github.com/Aidin1998/pincex_unified/internal/trading/model"
	"github.com/Aidin1998/pincex_unified/internal/trading/engine"
	"github.com/Aidin1998/pincex_unified/internal/trading/repository"
	"github.com/Aidin1998/pincex_unified/internal/trading/eventjournal"
	"github.com/Aidin1998/pincex_unified/internal/trading/settlement"
	"github.com/Aidin1998/pincex_unified/internal/trading/trigger"
)

// OrderEngine is a wrapper around the more advanced engine.MatchingEngine
// It provides backward compatibility with older code while using the new standardized types
type OrderEngine struct {
	logger    *zap.Logger
	db        *gorm.DB
	engine    *engine.MatchingEngine
	mu        sync.RWMutex
	running   bool
}

// NewOrderEngine creates a new order engine that wraps the actual engine implementation
func NewOrderEngine(logger *zap.Logger, db *gorm.DB) (*OrderEngine, error) {
	// Create the actual engine implementation
	engineConfig := &engine.Config{
		Engine: engine.EngineConfig{
			WorkerPoolSize:       8,
			WorkerPoolQueueSize:  1000,
			ResourcePollInterval: time.Second * 5,
			Risk: engine.RiskConfig{
				MaxOrderSize:    decimal.NewFromInt(100),
				MaxPositionSize: decimal.NewFromInt(1000),
			},
			WorkerPoolMonitorEnabled: true,
		},
		Pairs: []engine.PairConfig{
			{
				Symbol:               "BTCUSDT",
				MinPriceIncrement:    decimal.NewFromFloat(0.01),
				MinQuantityIncrement: decimal.NewFromFloat(0.00001),
			},
		},
	}
	
	// Initialize repositories
	orderRepo := repository.NewGormRepository(db, logger)
	tradeRepo := repository.NewGormTradeRepository(db, logger)
	
	// Create event journal
	eventJournal, _ := eventjournal.NewEventJournal(logger.Sugar(), "./logs/trading/events.log")
	
	// Create settlement engine
	settlementEngine := settlement.NewSettlementEngine()
	
	// Create trigger monitor for stop orders and other conditional orders
	triggerMonitor := trigger.NewTriggerMonitor(logger.Sugar(), orderRepo, time.Millisecond*100)
	
	// Create the actual engine implementation
	matchingEngine, err := engine.NewMatchingEngine(
		orderRepo,
		tradeRepo,
		logger.Sugar(), 
		engineConfig,
		eventJournal,
		nil, // No WebSocket hub
		nil, // No risk service
		settlementEngine,
		triggerMonitor,
	)
	
	if err != nil {
		return nil, fmt.Errorf("failed to create matching engine: %w", err)
	}
	
	return &OrderEngine{
		logger: logger,
		db:     db,
		engine: matchingEngine,
	}, nil
}

// ProcessOrder processes an order through the matching engine
func (e *OrderEngine) ProcessOrder(ctx context.Context, order *model.Order) error {
	e.mu.Lock()
	defer e.mu.Unlock()

	if !e.running {
		return fmt.Errorf("order engine is not running")
	}
	
	// Just delegate to the actual engine implementation
	_, _, _, err := e.engine.ProcessOrder(ctx, order, "API")
	return err
}

// Start starts the order engine
func (e *OrderEngine) Start() error {
	e.mu.Lock()
	defer e.mu.Unlock()
	
	if e.running {
		return nil
	}
	
	// The matching engine doesn't have an explicit Start method
	// But we'll mark our wrapper as running
	e.running = true
	e.logger.Info("Order engine started")
	return nil
}

// Stop stops the order engine
func (e *OrderEngine) Stop() error {
	e.mu.Lock()
	defer e.mu.Unlock()
	
	if !e.running {
		return nil
	}
	
	// The matching engine doesn't have an explicit Stop method
	// But we'll mark our wrapper as stopped
	e.running = false
	e.logger.Info("Order engine stopped")
	return nil
}

// GetOrderBook returns the current state of the order book for a specific market/pair
func (e *OrderEngine) GetOrderBook(pair string) (map[string]interface{}, error) {
	e.mu.RLock()
	defer e.mu.RUnlock()
	
	if !e.running {
		return nil, fmt.Errorf("order engine is not running")
	}
	
	// The matching engine takes a depth parameter
	return e.engine.GetOrderBookSnapshot(pair, 100)
}
