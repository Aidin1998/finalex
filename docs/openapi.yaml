openapi: 3.0.3
info:
  title: PinCEX Unified Exchange API
  description: |
    # PinCEX Unified Exchange API
    
    A high-performance cryptocurrency exchange API providing trading, market data, and account management capabilities.
    
    ## Key Features
    - High-frequency trading support with sub-10ms latency
    - Real-time market data via WebSocket
    - Comprehensive order management
    - Multi-tier rate limiting
    - Enterprise-grade security
    
    ## Base URLs
    - **Production**: `https://api.pincex.com`
    - **Sandbox**: `https://api-sandbox.pincex.com`
    
    ## Authentication
    This API supports multiple authentication methods:
    - **JWT Bearer Tokens**: For web applications
    - **API Keys**: For programmatic access
    - **OAuth 2.0**: For third-party integrations
    
    ## Rate Limiting
    - **VIP Tier**: 10,000 requests/minute
    - **Pro Tier**: 5,000 requests/minute  
    - **Standard Tier**: 1,000 requests/minute
    - **Basic Tier**: 200 requests/minute
    
    ## Error Handling
    All errors follow RFC 7807 Problem Details standard with consistent error codes and messages.
    
  version: 1.0.0
  contact:
    name: PinCEX API Support
    url: https://support.pincex.com
    email: api-support@pincex.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://pincex.com/terms

servers:
  - url: https://api.pincex.com
    description: Production server
  - url: https://api-sandbox.pincex.com
    description: Sandbox server for testing

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Health Check Endpoints
  /health:
    get:
      tags:
        - Health
      summary: Basic health check
      description: Returns the current health status of the API
      operationId: getHealth
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "ok"
                timestamp: "2025-06-02T10:30:00Z"
                version: "1.0.0"
                
  /health/detailed:
    get:
      tags:
        - Health
      summary: Detailed health check
      description: Returns detailed health information including dependencies
      operationId: getDetailedHealth
      security: []
      responses:
        '200':
          description: Detailed health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'

  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "secure_password_123"
              twoFactorCode: "123456"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Refresh an expired JWT token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current session/token
      operationId: logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Account Management
  /api/v1/account:
    get:
      tags:
        - Account
      summary: Get account information
      description: Retrieve current user's account details
      operationId: getAccount
      responses:
        '200':
          description: Account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/account/balance:
    get:
      tags:
        - Account
      summary: Get account balances
      description: Retrieve all asset balances for the current user
      operationId: getBalances
      responses:
        '200':
          description: Account balances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/account/balance/{asset}:
    get:
      tags:
        - Account
      summary: Get specific asset balance
      description: Retrieve balance for a specific asset
      operationId: getAssetBalance
      parameters:
        - name: asset
          in: path
          required: true
          description: Asset symbol (e.g., BTC, ETH, USD)
          schema:
            type: string
            example: "BTC"
      responses:
        '200':
          description: Asset balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        '404':
          $ref: '#/components/responses/NotFound'

  # Trading Endpoints
  /api/v1/orders:
    get:
      tags:
        - Trading
      summary: Get orders
      description: Retrieve user's orders with optional filtering
      operationId: getOrders
      parameters:
        - name: symbol
          in: query
          description: Trading pair symbol
          schema:
            type: string
            example: "BTCUSD"
        - name: status
          in: query
          description: Order status filter
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: side
          in: query
          description: Order side filter
          schema:
            $ref: '#/components/schemas/OrderSide'
        - name: limit
          in: query
          description: Maximum number of orders to return
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
        - name: offset
          in: query
          description: Number of orders to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'

    post:
      tags:
        - Trading
      summary: Create new order
      description: Place a new trading order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            example:
              symbol: "BTCUSD"
              side: "BUY"
              type: "LIMIT"
              quantity: "0.001"
              price: "50000.00"
              timeInForce: "GTC"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          description: Insufficient balance or trading restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orders/batch:
    post:
      tags:
        - Trading
      summary: Create multiple orders
      description: Place multiple orders in a single request
      operationId: createBatchOrders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateOrderRequest'
              maxItems: 100
      responses:
        '200':
          description: Batch order results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchOrderResponse'

  /api/v1/orders/{orderId}:
    get:
      tags:
        - Trading
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Trading
      summary: Cancel order
      description: Cancel an existing order
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID to cancel
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/orders/cancel-all:
    delete:
      tags:
        - Trading
      summary: Cancel all orders
      description: Cancel all open orders for the user
      operationId: cancelAllOrders
      parameters:
        - name: symbol
          in: query
          description: Optional symbol to cancel orders for specific pair
          schema:
            type: string
      responses:
        '200':
          description: Orders cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelAllResponse'

  # Market Data Endpoints
  /api/v1/market/symbols:
    get:
      tags:
        - Market Data
      summary: Get trading symbols
      description: Retrieve all available trading pairs
      operationId: getSymbols
      security: []
      responses:
        '200':
          description: List of trading symbols
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Symbol'

  /api/v1/market/ticker:
    get:
      tags:
        - Market Data
      summary: Get ticker information
      description: Get 24-hour ticker statistics for all symbols
      operationId: getTicker
      security: []
      responses:
        '200':
          description: Ticker information for all symbols
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticker'

  /api/v1/market/ticker/{symbol}:
    get:
      tags:
        - Market Data
      summary: Get ticker for symbol
      description: Get 24-hour ticker statistics for a specific symbol
      operationId: getTickerBySymbol
      security: []
      parameters:
        - name: symbol
          in: path
          required: true
          description: Trading pair symbol
          schema:
            type: string
            example: "BTCUSD"
      responses:
        '200':
          description: Ticker information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticker'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/market/orderbook/{symbol}:
    get:
      tags:
        - Market Data
      summary: Get order book
      description: Get current order book for a symbol
      operationId: getOrderBook
      security: []
      parameters:
        - name: symbol
          in: path
          required: true
          description: Trading pair symbol
          schema:
            type: string
            example: "BTCUSD"
        - name: limit
          in: query
          description: Number of price levels to return for each side
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Order book data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBook'

  /api/v1/market/trades/{symbol}:
    get:
      tags:
        - Market Data
      summary: Get recent trades
      description: Get recent trades for a symbol
      operationId: getTrades
      security: []
      parameters:
        - name: symbol
          in: path
          required: true
          description: Trading pair symbol
          schema:
            type: string
            example: "BTCUSD"
        - name: limit
          in: query
          description: Number of trades to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 500
      responses:
        '200':
          description: Recent trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'

  /api/v1/market/klines/{symbol}:
    get:
      tags:
        - Market Data
      summary: Get candlestick data
      description: Get candlestick/kline data for a symbol
      operationId: getKlines
      security: []
      parameters:
        - name: symbol
          in: path
          required: true
          description: Trading pair symbol
          schema:
            type: string
            example: "BTCUSD"
        - name: interval
          in: query
          required: true
          description: Kline interval
          schema:
            type: string
            enum: ["1m", "3m", "5m", "15m", "30m", "1h", "2h", "4h", "6h", "8h", "12h", "1d", "3d", "1w", "1M"]
        - name: startTime
          in: query
          description: Start time (Unix timestamp in milliseconds)
          schema:
            type: integer
            format: int64
        - name: endTime
          in: query
          description: End time (Unix timestamp in milliseconds)
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of klines to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 500
      responses:
        '200':
          description: Candlestick data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kline'

  # Admin Endpoints
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get users (Admin only)
      description: Retrieve list of users with filtering
      operationId: getUsers
      security:
        - AdminAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: status
          in: query
          schema:
            type: string
            enum: ["ACTIVE", "SUSPENDED", "PENDING_VERIFICATION"]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users/{userId}/suspend:
    post:
      tags:
        - Admin
      summary: Suspend user account
      description: Suspend a user account
      operationId: suspendUser
      security:
        - AdminAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendUserRequest'
      responses:
        '200':
          description: User suspended successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: API key for programmatic access
    
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Admin JWT token with elevated privileges

  schemas:
    # Health Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ok", "degraded", "error"]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
      required:
        - status
        - timestamp
        - version

    DetailedHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ok", "degraded", "error"]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        components:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ComponentHealth'
            redis:
              $ref: '#/components/schemas/ComponentHealth'
            trading_engine:
              $ref: '#/components/schemas/ComponentHealth'
            market_data:
              $ref: '#/components/schemas/ComponentHealth'
      required:
        - status
        - timestamp
        - version
        - components

    ComponentHealth:
      type: object
      properties:
        status:
          type: string
          enum: ["ok", "degraded", "error"]
        latency_ms:
          type: number
        last_check:
          type: string
          format: date-time
        details:
          type: string

    # Authentication Schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        twoFactorCode:
          type: string
          pattern: '^[0-9]{6}$'
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        tokenType:
          type: string
          enum: ["Bearer"]
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - refreshToken
        - expiresIn
        - tokenType
        - user

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: ["ACTIVE", "SUSPENDED", "PENDING_VERIFICATION"]
        tier:
          type: string
          enum: ["BASIC", "STANDARD", "PRO", "VIP"]
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - status
        - tier
        - createdAt

    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: ["SPOT", "MARGIN", "FUTURES"]
        status:
          type: string
          enum: ["ACTIVE", "SUSPENDED", "RESTRICTED"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - status

    Balance:
      type: object
      properties:
        asset:
          type: string
          description: Asset symbol
          example: "BTC"
        available:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Available balance for trading
          example: "1.25000000"
        locked:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Balance locked in open orders
          example: "0.50000000"
        total:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Total balance (available + locked)
          example: "1.75000000"
      required:
        - asset
        - available
        - locked
        - total

    # Trading Schemas
    OrderStatus:
      type: string
      enum: ["PENDING", "PARTIAL", "FILLED", "CANCELLED", "REJECTED"]

    OrderSide:
      type: string
      enum: ["BUY", "SELL"]

    OrderType:
      type: string
      enum: ["MARKET", "LIMIT", "STOP", "STOP_LIMIT"]

    TimeInForce:
      type: string
      enum: ["GTC", "IOC", "FOK"]

    CreateOrderRequest:
      type: object
      properties:
        symbol:
          type: string
          description: Trading pair symbol
          example: "BTCUSD"
        side:
          $ref: '#/components/schemas/OrderSide'
        type:
          $ref: '#/components/schemas/OrderType'
        quantity:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Order quantity
          example: "0.001"
        price:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Order price (required for LIMIT and STOP_LIMIT orders)
          example: "50000.00"
        stopPrice:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Stop price (required for STOP and STOP_LIMIT orders)
        timeInForce:
          $ref: '#/components/schemas/TimeInForce'
        clientOrderId:
          type: string
          description: Client-provided order ID
          maxLength: 64
      required:
        - symbol
        - side
        - type
        - quantity

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Order ID
        clientOrderId:
          type: string
          description: Client-provided order ID
        userId:
          type: string
          format: uuid
        symbol:
          type: string
          example: "BTCUSD"
        side:
          $ref: '#/components/schemas/OrderSide'
        type:
          $ref: '#/components/schemas/OrderType'
        quantity:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        price:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        stopPrice:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        filledQuantity:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Quantity that has been filled
        remainingQuantity:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Quantity remaining to be filled
        status:
          $ref: '#/components/schemas/OrderStatus'
        timeInForce:
          $ref: '#/components/schemas/TimeInForce'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        fills:
          type: array
          items:
            $ref: '#/components/schemas/Fill'
      required:
        - id
        - userId
        - symbol
        - side
        - type
        - quantity
        - filledQuantity
        - remainingQuantity
        - status
        - createdAt
        - updatedAt

    Fill:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        tradeId:
          type: string
          format: uuid
        price:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        quantity:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        fee:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        feeAsset:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - id
        - orderId
        - tradeId
        - price
        - quantity
        - fee
        - feeAsset
        - timestamp

    OrderList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - orders
        - pagination

    BatchOrderResponse:
      type: object
      properties:
        successful:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/OrderError'
      required:
        - successful
        - errors

    OrderError:
      type: object
      properties:
        clientOrderId:
          type: string
        error:
          $ref: '#/components/schemas/ErrorResponse'
      required:
        - error

    CancelAllResponse:
      type: object
      properties:
        cancelled:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        errors:
          type: array
          items:
            type: object
            properties:
              orderId:
                type: string
                format: uuid
              error:
                type: string
      required:
        - cancelled
        - errors

    # Market Data Schemas
    Symbol:
      type: object
      properties:
        symbol:
          type: string
          example: "BTCUSD"
        baseAsset:
          type: string
          example: "BTC"
        quoteAsset:
          type: string
          example: "USD"
        status:
          type: string
          enum: ["TRADING", "HALT", "BREAK"]
        baseAssetPrecision:
          type: integer
          example: 8
        quoteAssetPrecision:
          type: integer
          example: 2
        minQty:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          example: "0.00001"
        maxQty:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        minPrice:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        maxPrice:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        tickSize:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          example: "0.01"
      required:
        - symbol
        - baseAsset
        - quoteAsset
        - status

    Ticker:
      type: object
      properties:
        symbol:
          type: string
          example: "BTCUSD"
        price:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: Current price
          example: "50000.00"
        priceChange:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: 24h price change
          example: "1500.00"
        priceChangePercent:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: 24h price change percentage
          example: "3.09"
        high:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: 24h high price
        low:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: 24h low price
        volume:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: 24h volume in base asset
        quoteVolume:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
          description: 24h volume in quote asset
        openTime:
          type: integer
          format: int64
          description: 24h ticker open time
        closeTime:
          type: integer
          format: int64
          description: 24h ticker close time
        count:
          type: integer
          description: Number of trades in 24h
      required:
        - symbol
        - price
        - priceChange
        - priceChangePercent
        - high
        - low
        - volume
        - quoteVolume

    OrderBook:
      type: object
      properties:
        symbol:
          type: string
          example: "BTCUSD"
        bids:
          type: array
          items:
            $ref: '#/components/schemas/PriceLevel'
          description: Buy orders (bids)
        asks:
          type: array
          items:
            $ref: '#/components/schemas/PriceLevel'
          description: Sell orders (asks)
        timestamp:
          type: integer
          format: int64
          description: Order book timestamp
      required:
        - symbol
        - bids
        - asks
        - timestamp

    PriceLevel:
      type: array
      items:
        type: string
      minItems: 2
      maxItems: 2
      description: '[price, quantity]'
      example: ["50000.00", "1.25000000"]

    Trade:
      type: object
      properties:
        id:
          type: string
          format: uuid
        symbol:
          type: string
          example: "BTCUSD"
        price:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        quantity:
          type: string
          pattern: '^[0-9]+(\.[0-9]+)?$'
        timestamp:
          type: integer
          format: int64
        isBuyerMaker:
          type: boolean
          description: True if the buyer is the maker
      required:
        - id
        - symbol
        - price
        - quantity
        - timestamp
        - isBuyerMaker

    Kline:
      type: array
      items:
        oneOf:
          - type: integer
            format: int64
          - type: string
            pattern: '^[0-9]+(\.[0-9]+)?$'
      minItems: 12
      maxItems: 12
      description: |
        Kline/Candlestick data array:
        [
          openTime,       // 0: Open time (timestamp)
          open,           // 1: Open price
          high,           // 2: High price  
          low,            // 3: Low price
          close,          // 4: Close price
          volume,         // 5: Volume
          closeTime,      // 6: Close time (timestamp)
          quoteVolume,    // 7: Quote asset volume
          tradesCount,    // 8: Number of trades
          takerBuyVolume, // 9: Taker buy base asset volume
          takerBuyQuoteVolume, // 10: Taker buy quote asset volume
          ignore          // 11: Unused field (ignore)
        ]

    # Admin Schemas
    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - users
        - pagination

    SuspendUserRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for suspension
        duration:
          type: integer
          description: Suspension duration in hours (0 for indefinite)
      required:
        - reason

    # Common Schemas
    Pagination:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
        hasNext:
          type: boolean
      required:
        - limit
        - offset
        - total
        - hasNext

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type
          example: "https://api.pincex.com/errors/validation-error"
        title:
          type: string
          description: A short, human-readable summary of the problem
          example: "Validation Error"
        status:
          type: integer
          description: HTTP status code
          example: 400
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence
          example: "The 'quantity' field must be greater than 0"
        instance:
          type: string
          format: uri
          description: URI reference that identifies the specific occurrence
          example: "/api/v1/orders"
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          description: Unique identifier for request tracing
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
      required:
        - type
        - title
        - status
        - detail
        - timestamp

  responses:
    BadRequest:
      description: Bad Request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "https://api.pincex.com/errors/validation-error"
            title: "Validation Error"
            status: 400
            detail: "Invalid request parameters"
            timestamp: "2025-06-02T10:30:00Z"
            traceId: "abc123-def456"

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "https://api.pincex.com/errors/unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "Invalid or expired authentication token"
            timestamp: "2025-06-02T10:30:00Z"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "https://api.pincex.com/errors/forbidden"
            title: "Forbidden"
            status: 403
            detail: "Insufficient permissions for this operation"
            timestamp: "2025-06-02T10:30:00Z"

    NotFound:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "https://api.pincex.com/errors/not-found"
            title: "Not Found"
            status: 404
            detail: "The requested resource was not found"
            timestamp: "2025-06-02T10:30:00Z"

    RateLimited:
      description: Too Many Requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Requests remaining in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when the rate limit resets (Unix timestamp)
        Retry-After:
          schema:
            type: integer
          description: Seconds until rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "https://api.pincex.com/errors/rate-limit"
            title: "Rate Limit Exceeded"
            status: 429
            detail: "Request rate limit exceeded. Please try again later."
            timestamp: "2025-06-02T10:30:00Z"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: "https://api.pincex.com/errors/internal-error"
            title: "Internal Server Error"
            status: 500
            detail: "An unexpected error occurred. Please try again later."
            timestamp: "2025-06-02T10:30:00Z"
            traceId: "xyz789-uvw012"

tags:
  - name: Health
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and session management
  - name: Account
    description: User account and balance management
  - name: Trading
    description: Order placement and management
  - name: Market Data
    description: Public market data and price information
  - name: Admin
    description: Administrative endpoints (restricted access)
