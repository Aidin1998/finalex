// Code generated by swagger-gen. DO NOT EDIT.

package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
  "openapi": "3.0.0",
  "info": {
    "title": "Finalex Cryptocurrency Exchange API",
    "version": "1.0.0",
    "description": "Comprehensive API for the Finalex cryptocurrency exchange platform.\n\nThis API provides complete access to all platform functionality including:\n- User authentication and account management\n- Trading operations (spot, cross-pair, advanced orders)\n- Wallet and balance management\n- Market data and analytics\n- Compliance and risk management\n- Administrative functions\n\n## Authentication\n\nThe API uses multiple authentication methods:\n- **Bearer Token**: JWT tokens for user authentication\n- **API Key**: For programmatic access\n- **HMAC Signature**: For sensitive operations\n\n## Rate Limiting\n\nAll endpoints are rate limited based on user tier:\n- **Basic**: 100 requests/minute\n- **Premium**: 1000 requests/minute\n- **VIP**: 10000 requests/minute\n\n## Error Handling\n\nAll errors follow RFC 7807 Problem Details standard",
    "contact": {
      "name": "Finalex API Support",
      "url": "https://finalex.io/support",
      "email": "api-support@finalex.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.finalex.io",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.finalex.io", 
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": ["System"],
        "summary": "Health check",
        "description": "Check API health and status",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "integer",
                      "example": 1672531200
                    },
                    "version": {
                      "type": "string", 
                      "example": "1.0.0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register new user",
        "description": "Create a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password", "username"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "SecurePass123!"
                  },
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "example": "john_doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation errors"
          },
          "409": {
            "description": "User already exists"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refresh_token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "expires_in": {
                      "type": "integer",
                      "example": 3600
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "429": {
            "description": "Too many login attempts"
          }
        }
      }
    },
    "/api/v1/trading/pairs": {
      "get": {
        "tags": ["Trading"],
        "summary": "Get trading pairs",
        "description": "Retrieve list of available trading pairs",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trading pairs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "symbol": {
                            "type": "string",
                            "example": "BTC/USDT"
                          },
                          "base_currency": {
                            "type": "string",
                            "example": "BTC"
                          },
                          "quote_currency": {
                            "type": "string",
                            "example": "USDT"
                          },
                          "min_order_size": {
                            "type": "string",
                            "example": "0.001"
                          },
                          "max_order_size": {
                            "type": "string",
                            "example": "100"
                          },
                          "price_precision": {
                            "type": "integer",
                            "example": 2
                          },
                          "quantity_precision": {
                            "type": "integer",
                            "example": 6
                          },
                          "status": {
                            "type": "string",
                            "enum": ["active", "inactive"],
                            "example": "active"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/wallet/balances": {
      "get": {
        "tags": ["Wallet"],
        "summary": "Get wallet balances",
        "description": "Retrieve user's wallet balances for all cryptocurrencies",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Balances retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "currency": {
                            "type": "string",
                            "example": "BTC"
                          },
                          "available": {
                            "type": "string",
                            "example": "1.25000000"
                          },
                          "locked": {
                            "type": "string",
                            "example": "0.50000000"
                          },
                          "total": {
                            "type": "string",
                            "example": "1.75000000"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from login endpoint"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for programmatic access"
      },
      "HmacAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Signature",
        "description": "HMAC signature for sensitive operations"
      }
    }
  },
  "tags": [
    {
      "name": "System",
      "description": "Health checks and system information"
    },
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Trading",
      "description": "Spot trading operations"
    },
    {
      "name": "Wallet",
      "description": "Wallet and cryptocurrency operations"
    },
    {
      "name": "Market Data",
      "description": "Market prices and data feeds"
    },
    {
      "name": "Admin",
      "description": "Administrative functions"
    }
  ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Finalex Cryptocurrency Exchange API",
	Description:      "Comprehensive API for the Finalex cryptocurrency exchange platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
