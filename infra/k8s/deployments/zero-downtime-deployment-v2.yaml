# Zero-Downtime Kubernetes Deployment for PinCEX Unified Exchange
# Advanced Rolling Update Strategy with Comprehensive Health Checks

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pincex-unified-exchange
  namespace: pincex-production
  labels:
    app: pincex-exchange
    version: v2.0.0
    tier: production
    component: trading-engine
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"strategy": "zero-downtime"}
spec:
  replicas: 6
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: pincex-exchange
      tier: production
  template:
    metadata:
      labels:
        app: pincex-exchange
        version: v2.0.0
        tier: production
        component: trading-engine
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      terminationGracePeriodSeconds: 90
      serviceAccountName: pincex-service-account
      containers:
      - name: pincex-exchange
        image: pincex/unified-exchange:v2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: grpc
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: pincex-db-secret
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: pincex-redis-secret
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: pincex-jwt-secret
              key: jwt-secret
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                # Graceful shutdown sequence
                echo "Starting graceful shutdown..."
                
                # Signal application to stop accepting new requests
                curl -X POST http://localhost:8080/shutdown/prepare
                
                # Wait for existing connections to drain
                sleep 15
                
                # Final shutdown signal
                curl -X POST http://localhost:8080/shutdown/execute
                
                # Give time for cleanup
                sleep 10
                
                echo "Graceful shutdown completed"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: temp-volume
          mountPath: /tmp
      - name: sidecar-proxy
        image: envoyproxy/envoy:v1.24-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 15000
          name: envoy-admin
        - containerPort: 15001
          name: envoy-proxy
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
      volumes:
      - name: config-volume
        configMap:
          name: pincex-config
          defaultMode: 0644
      - name: logs-volume
        emptyDir: {}
      - name: temp-volume
        emptyDir: {}
      - name: envoy-config
        configMap:
          name: envoy-config
          defaultMode: 0644
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - pincex-exchange
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - production
      tolerations:
      - key: "high-performance"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Service for Load Balancing
apiVersion: v1
kind: Service
metadata:
  name: pincex-exchange-service
  namespace: pincex-production
  labels:
    app: pincex-exchange
    service: load-balancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  selector:
    app: pincex-exchange
    tier: production
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pincex-exchange-hpa
  namespace: pincex-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pincex-unified-exchange
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pincex-exchange-pdb
  namespace: pincex-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: pincex-exchange
      tier: production
