name: CI

on:
  push:
    branches: [ main, pincex_unified ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: go mod tidy

    - name: Build
      run: go build -v ./cmd/pincex

    - name: Test (unit & integration)
      run: go test -v ./test/...

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install golangci-lint
      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: golangci-lint run

  docker:
    needs: [build, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/pincex_unified')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: aidin1998/pincex:latest

  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    - name: Run unit tests with coverage
      run: |
        go test -covermode=count -coverprofile=coverage.out ./internal/auth/... ./internal/database/... ./internal/trading/...
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3,1,length($3)-1)}')
        echo "Total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
          echo "Coverage threshold not met"
          exit 1
        fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 2375:2375
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    - name: Start services
      run: docker-compose -f docker-compose.yml up -d
    - name: Run integration tests
      run: go test -v ./test/integration/...

  contract:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Run contract tests
      run: go test -v ./test/contracts/...

  chaos-testing:
    name: Chaos Engineering
    runs-on: ubuntu-latest
    needs: integration
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 2375:2375
    steps:
    - uses: actions/checkout@v3
    - name: Start services
      run: docker-compose -f docker-compose.yml up -d
    - name: Run chaos monkey
      run: bash scripts/chaos_monkey.sh
    - name: Post-chaos health check
      run: bash scripts/health_check.sh
