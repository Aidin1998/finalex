# Ultra-High Concurrency Database Layer Performance Testing Configuration
# Comprehensive performance testing setup for 100k+ RPS validation

version: "3.8"

services:
  # PostgreSQL with optimized configuration for high concurrency
  postgres-test:
    image: postgres:15-alpine
    container_name: accounts_postgres_test
    environment:
      POSTGRES_DB: accounts_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./migrations/postgres:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - accounts_test_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d accounts_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cluster for distributed caching and locking
  redis-test:
    image: redis:7-alpine
    container_name: accounts_redis_test
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - accounts_test_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: accounts_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./test/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
    networks:
      - accounts_test_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: accounts_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./test/grafana/provisioning:/etc/grafana/provisioning
      - ./test/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - accounts_test_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: accounts_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - accounts_test_network

  # Load testing with k6
  k6-load-test:
    image: grafana/k6:latest
    container_name: accounts_k6_test
    volumes:
      - ./test/k6:/scripts
    environment:
      K6_PROMETHEUS_RW_SERVER_URL: http://prometheus:9090/api/v1/write
      K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: true
    networks:
      - accounts_test_network
    profiles:
      - load-test

  # Application under test
  accounts-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: accounts_app_test
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://test_user:test_password@postgres-test:5432/accounts_test
      REDIS_URL: redis://redis-test:6379/0
      METRICS_ENABLED: "true"
      LOG_LEVEL: "info"
      MAX_CONNECTIONS: "1000"
      CONNECTION_POOL_SIZE: "100"
    ports:
      - "8080:8080"
      - "9091:9091"  # Metrics endpoint
    networks:
      - accounts_test_network
    profiles:
      - app-test

networks:
  accounts_test_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
